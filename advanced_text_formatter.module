<?php

/**
 * @file
 * Advanced Text Formatter
 */

use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_field_widget_info_alter().
 */
function advanced_text_formatter_field_widget_info_alter(&$info) {
  if (module_exists('token')) {
    $info['text_textarea']['settings']['show_token_tree'] = FALSE;
    $info['text_textfield']['settings']['show_token_tree'] = FALSE;
    $info['text_textarea_with_summary']['settings']['show_token_tree'] = FALSE;
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function advanced_text_formatter_field_widget_text_textarea_form_alter(&$element, &$form_state, $context) {
  $widget = $context['widget'];

  if (!module_exists('token') || !$widget->getSetting('show_token_tree')) {
    return;
  }

  $field       = $context['field_definition'];
  $description = trim($element['#description']);

  if (!empty($description)) {
    if (substr($description, -1) != '.') {
      $description .= '. ';
    }
    else {
      $description .= ' ';
    }
  }

  $description .= _advanced_text_formatter_browse_tokens($field->entity_type);

  $element['#description'] = $description;
  $element['value']['#description'] = $description;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function advanced_text_formatter_field_widget_text_textfield_form_alter(&$element, &$form_state, $context) {
  $widget = $context['widget'];

  if (!module_exists('token') || !$widget->getSetting('show_token_tree')) {
    return;
  }

  $field       = $context['field_definition'];
  $description = trim($element['#description']);

  if (!empty($description)) {
    if (substr($description, -1) != '.') {
      $description .= '. ';
    }
    else {
      $description .= ' ';
    }
  }

  $description .= _advanced_text_formatter_browse_tokens($field->entity_type);

  $element['#description'] = $description;
  $element['value']['#description'] = $description;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function advanced_text_formatter_field_widget_text_textarea_with_summary_form_alter(&$element, &$form_state, $context) {
  $widget = $context['widget'];

  if (!module_exists('token') || !$widget->getSetting('show_token_tree')) {
    return;
  }

  $element['#pre_render'][] = '_advanced_text_formatter_field_add_token_tree';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_text_formatter_form_field_ui_field_instance_edit_form_alter(&$form, &$form_state) {
  if (!module_exists('token')) {
    return;
  }

  $instance    = reset($form_state['build_info']['args']);
  $widget      = _advanced_text_formatter_get_widget($instance);
  $widget_type = $widget->getPluginId();

  switch ($widget_type) {
    case 'text_textarea':
    case 'text_textfield':
    case 'text_textarea_with_summary':
      $form['instance']['widget']['settings']['show_token_tree'] = array(
        '#type'          => 'checkbox',
        '#title'         => t("Show available tokens in field's description"),
        '#return_value'  => 1,
        '#default_value' => $widget->getSetting('show_token_tree'),
        '#weight'        => -99,
      );

      break;
  }
}

/**
 * Trim text.
 *
 * @param string $text
 *   The string is being trimmed.
 *
 * @param array $options
 *   An associative array containing:
 *   - html: TRUE means that text is in HTML.
 *   - max_length: The maximum number of characters the a field can be.
 *   - word_boundary: If checked, this field be trimmed only on a word boundary.
 *   - ellipsis: If TRUE, a "..." will be added if a field was trimmed.
 *
 * @return string
 *   The trimmed string.
 */
function advanced_text_formatter_trim_text($text, $options) {
  if (!isset($options['html'])) {
    $options['html'] = TRUE;
  }

  if (drupal_strlen($text) > $options['max_length']) {
    $text = drupal_substr($text, 0, $options['max_length']);

    // TODO: replace this with cleanstring of ctools.
    if (!empty($options['word_boundary'])) {
      $regex = "(.*)\b.+";

      if (function_exists('mb_ereg')) {
        mb_regex_encoding('UTF-8');
        $found = mb_ereg($regex, $text, $matches);
      }
      else {
        $found = preg_match("/$regex/us", $text, $matches);
      }

      if ($found) {
        $text = $matches[1];
      }
    }

    // Remove scraps of HTML entities from the end of a strings.
    $text = rtrim(preg_replace('/(?:<(?!.+>)|&(?!.+;)).*$/us', '', $text));

    if (!empty($options['ellipsis'])) {
      $text .= t('...');
    }
  }

  if (!empty($options['html'])) {
    $text = _filter_htmlcorrector($text);
  }

  return $text;
}

/**
 * Get a link to browse for available tokens.
 *
 * @param mixed $token_types
 *   A string or array contains the token types. See theme_token_tree() for more
 *   details.
 *
 * @return string
 *   A HTML link
 */
function _advanced_text_formatter_browse_tokens($token_types) {
  if (!module_exists('token')) {
    return;
  }

  if (!is_array($token_types)) {
    $token_types = array($token_types);
  }

  $vars['token_types'] = $token_types;

  return theme('token_tree_link', $vars);
}

/**
 * Add available tokens link to text_format element.
 *
 * @param array $element
 *   Form element
 *
 * @return array
 *   Form element
 */
function _advanced_text_formatter_field_add_token_tree($element) {
  $element['format']['show_token'] = array(
    '#type' => 'container',
    'link'  => array(
      '#markup' => _advanced_text_formatter_browse_tokens($element['#entity_type']),
    ),
    '#attributes' => array(
      'class' => array('clearfix'),
    ),
    '#weight' => 99,
  );

  return $element;
}

/**
 * Change tags from string to array to speed up the formatter view.
 *
 * @param array $element
 *   Form element.
 *
 * @param array $form_state
 *   Form state.
 */
function _advanced_text_formatter_validate_allowed_html($element, &$form_state) {
  $tags  = array();
  $value = isset($element['#value']) ? trim($element['#value']) : '';

  if (!empty($value)) {
    $tags = preg_split('/\s+|<|>/', $value, -1, PREG_SPLIT_NO_EMPTY);
  }

  NestedArray::setValue($form_state['values'], $element['#parents'], $tags);
}
