<?php

/**
 * @file
 * Advanced Text Formatter
 */

/**
 * Implements hook_field_formatter_info().
 */
function advanced_text_formatter_field_formatter_info() {
  return array(
    'advanced_text' => array(
      'label'       => t('Advanced Text'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings'    => array(
        'trim_length'    => 600,
        'ellipsis'       => 1,
        'word_boundary'  => 1,
        'token_replace'  => '0',
        'display'        => 'html',
        'newline'        => '0',
        'filter'         => 'input',
        'format'         => 'filtered_html',
        'allowable_tags' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function advanced_text_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element  = array();

  if ($display['type'] == 'advanced_text') {
    $elid_display = drupal_html_id('advanced_text_formatter_display');
    $elid_filter  = drupal_html_id('advanced_text_formatter_filter');

    $element['trim_length'] = array(
      '#title'            => t('Trim length'),
      '#type'             => 'textfield',
      '#size'             => 10,
      '#default_value'    => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer'),
      '#required'         => TRUE,
    );

    $element['ellipsis'] = array(
      '#title'         => t('Ellipsis'),
      '#type'          => 'checkbox',
      '#default_value' => $settings['ellipsis'],
    );

    $element['word_boundary'] = array(
      '#title'         => t('Word Boundary'),
      '#type'          => 'checkbox',
      '#default_value' => $settings['word_boundary'],
    );

    $element['token_replace'] = array(
      '#title'         => t('Token Replace'),
      '#type'          => 'checkbox',
      '#default_value' => $settings['token_replace'],
    );

    $element['display'] = array(
      '#id'      => $elid_display,
      '#title'   => t('Display'),
      '#type'    => 'select',
      '#options' => array(
        'plain_text' => t('Plain Text'),
        'html'       => t('HTML'),
      ),
      '#default_value' => $settings['display'],
    );

    $element['filter'] = array(
      '#id'      => $elid_filter,
      '#title'   => t('Filter'),
      '#type'    => 'select',
      '#options' => array(
        'none'   => t('None'),
        'input'  => t('Selected Text Format'),
        'php'    => t('PHP strip_tags()'),
        'drupal' => t('Drupal'),
      ),
      '#default_value' => $settings['filter'],
      '#states'        => array(
        'visible' => array(
          '#' . $elid_display => array('value' => 'html'),
        ),
      ),
    );

    $element['format'] = array(
      '#title'         => t('Format'),
      '#type'          => 'select',
      '#options'       => array(),
      '#default_value' => $settings['format'],
      '#states'        => array(
        'visible' => array(
          '#' . $elid_display => array('value' => 'html'),
          '#' . $elid_filter  => array('value' => 'drupal'),
        ),
      ),
    );

    $formats = filter_formats();

    foreach ($formats as $format => $info) {
      $element['format']['#options'][$format] = $info->name;
    }

    $element['allowable_tags'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Allowed Tags'),
      '#description'   => t('Multiple allowed tags, separated by <em>comma</em> or <em>space</em>. See PHP <a href="!link">strip_tags()</a> for more information', array(
                            '!link' => 'http://php.net/manual/en/function.strip-tags.php',
                          )),
      '#default_value' => $settings['allowable_tags'],
      '#states'        => array(
        'visible' => array(
          '#' . $elid_display => array('value' => 'html'),
          '#' . $elid_filter  => array('value' => 'php'),
        ),
      ),
    );

    $element['newline'] = array(
      '#title'   => t('Keep new lines'),
      '#type'    => 'radios',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No'),
      ),
      '#default_value' => $settings['newline'],
      '#states'        => array(
        'invisible' => array(
          '#' . $elid_display => array('value' => 'html'),
          '#' . $elid_filter  => array('!value' => 'php'),
        ),
      ),
    );

    $element['br'] = array('#markup' => '<br/>');
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function advanced_text_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary  = array();

  if ($display['type'] == 'advanced_text') {
    $summary[] = t('Trim length') . ': ' . $settings['trim_length'];
    $summary[] = t('Ellipsis') . ': ' . ((isset($settings['ellipsis']) && $settings['ellipsis']) ? t('Yes') : t('No'));
    $summary[] = t('Word Boundary') . ': ' . ((isset($settings['word_boundary']) && $settings['word_boundary']) ? t('Yes') : t('No'));
    $summary[] = t('Token Replace') . ': ' . ((isset($settings['token_replace']) && $settings['token_replace']) ? t('Yes') : t('No'));

    if ($settings['display'] == 'html') {
      $summary[] = t('Display: @display', array('@display' => t('HTML')));

      if ($settings['filter'] == 'drupal') {
        $summary[] = t('Filter: @filter', array('@filter' => t('Drupal')));

        $formats = filter_formats();
        $format  = isset($formats[$settings['format']]) ? $formats[$settings['format']]->name : t('Unknown');
        $summary[] = t('Format: @format', array('@format' => $format));
      }
      elseif ($settings['filter'] == 'php') {
        $summary[] = t('Filter: @filter', array('@filter' => t('PHP (Strip tags)')));

        $tags = trim($settings['allowable_tags']);
        $tags = preg_split('#,|\||\s#', $tags);
        $tags = array_filter($tags);

        if (empty($tags)) {
          $summary[] = t('Strip all tags');
        }
        else {
          $tags = '<' . implode('>, <', $tags) . '>';
          $summary[] = t('Allowed tags: <i>@tags</i>', array('@tags' => $tags));
        }

        if (empty($settings['newline'])) {
          $summary[] = t('No new lines');
        }
      }
      elseif ($settings['filter'] == 'input') {
        $summary[] = t('Filter: @filter', array('@filter' => t('Selected Text Format')));
      }
      else {
        $summary[] = t('Filter: @filter', array('@filter' => t('None')));
      }
    }
    else {
      $text = t('Display: @display', array('@display' => t('Plain Text')));

      if (empty($settings['newline'])) {
        $text .= ', ' . t('no new lines');
      }

      $summary[] = $text;
    }
  }

  $summary = array_filter($summary);

  return implode('<br/>', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function advanced_text_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'advanced_text':
      $settings   = $display['settings'];
      $newline    = ($settings['display'] != 'html' || ($settings['display'] == 'html' && $settings['filter'] == 'php')) && !empty($settings['newline']);
      $token_data = array($entity_type => $entity);

      foreach ($items as $delta => $item) {
        $output = $item['value'];

        if ($settings['token_replace']) {
          $output = token_replace($output, $token_data);
        }

        if ($settings['display'] == 'html') {
          if ($settings['filter'] == 'input') {
            $output = check_markup($output, $item['format'], $langcode);
          }
          elseif ($settings['filter'] == 'php') {
            $tags = trim($settings['allowable_tags']);
            $tags = preg_split('#,|\||\s#', $tags);
            $tags = array_filter($tags);

            if (empty($tags)) {
              $tags = '';
            }
            else {
              $tags = '<' . implode('><', $tags) . '>';
            }

            $output = strip_tags($output, $tags);
          }
          elseif ($settings['filter'] == 'drupal') {
            $output = check_markup($output, $settings['format'], $langcode);
          }
        }
        else {
          $output = strip_tags($output);
        }

        if ($settings['trim_length'] > 0) {
          $options  = array(
            'word_boundary' => $settings['word_boundary'],
            'max_length'    => $settings['trim_length'],
            'ellipsis'      => $settings['ellipsis'],
            'html'          => $settings['display'] == 'html',
          );

          $output = advanced_text_formatter_trim_text($output, $options);
        }

        if ($newline) {
          $output = nl2br($output);
        }

        $element[$delta] = array('#markup' => $output);
      }

      break;
  }

  return $element;
}

/**
 * Trim text.
 *
 * @param string $text
 *   The string is being trimmed.
 *
 * @param array $options
 *   An associative array containing:
 *   - html: TRUE means that text is in HTML.
 *   - max_length: The maximum number of characters the a field can be.
 *   - word_boundary: If checked, this field be trimmed only on a word boundary.
 *   - ellipsis: If TRUE, a "..." will be added if a field was trimmed.
 *
 * @return string
 *   The trimmed string.
 */
function advanced_text_formatter_trim_text($text, $options) {
  if (!isset($options['html'])) {
    $options['html'] = TRUE;
  }

  if (drupal_strlen($text) > $options['max_length']) {
    $text = drupal_substr($text, 0, $options['max_length']);

    // TODO: replace this with cleanstring of ctools.
    if (!empty($options['word_boundary'])) {
      $regex = "(.*)\b.+";

      if (function_exists('mb_ereg')) {
        mb_regex_encoding('UTF-8');
        $found = mb_ereg($regex, $text, $matches);
      }
      else {
        $found = preg_match("/$regex/us", $text, $matches);
      }

      if ($found) {
        $text = $matches[0];
      }
    }

    // Remove scraps of HTML entities from the end of a strings.
    $text = rtrim(preg_replace('/(?:<(?!.+>)|&(?!.+;)).*$/us', '', $text));

    if (!empty($options['ellipsis'])) {
      $text .= t('...');
    }
  }

  if (!empty($options['html'])) {
    $text = _filter_htmlcorrector($text);
  }

  return $text;
}
